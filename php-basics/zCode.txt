app:
    Controllers:
        index.php
        TaskController.php
        ex.php
    ---------------------------
    Core
        Router.php
        Request.php
    ---------------------------
    Database
        DBConnection.php
        QueryBuilder.php
---------------------------
resources:
    index.view.php
    ex.view.php
---------------------------
_init.php
.htaccess
index.php 

----------------------------------------------------------------------------

----------------------------------------------------------------------------

----------------------------------------------------------------------------
class DBConnection{
    private static $pdo;
    public static function make(){
        try{
            self::$pdo = self::$pdo ? : new PDO("mysql:host=localhost;dbname=php_basics","root","");
            return self::$pdo;
        }catch(PDOException $e){
            die("Cant Connecet To DataBase: " . $e->getMessage());
        };
    }  
};

class QueryBuilder{
    private static $pdo;
    public static function make(){
        self::$pdo = $pdo;
    }
    public static function get(string $table){
        $query = self::$pdo -> prepare("SELECT * FROM {$table}");
        $query -> execute();
        return $query -> fetchAll(PDO::FETCH_OBJ);
    }
    public static function insert($table,$data){
        $fileds = array_keys($data);
        $fieldsStr = implode(",",$fileds);
        $valuesStr = str_repeat("?,", count($data) - 1) . "?";
        $query = "INSERT INTO {$table} ({$fieldsStr}) VALUES ({$valuesStr})"; 
        $statement = self::$pdo -> prepare($query);
        $statement -> execute(array_values($data));
    }
    public static function update($table, $id, $data){
        $fields = implode(" = ? ,", array_keys($data)) . " = ?";
        $values = array_values($data);
        $query = "UPDATE {$table} SET {$fields} WHERE id = {$id}";
        $statement = self::$pdo -> prepare($query);
        $statement -> execute($values);   
    }
    public static function delete($table, $id, $column="id", $operator="="){
        $query = "DELETE FROM {$table} WHERE {$column} {$operator} {$id}";
        $statement = self::$pdo -> prepare($query);
        $statement -> execute();
    }
};

class Router{
    private $get;
    private $post;
    public static function make(){
        $router = new self;
        return $router;
    }
    public function get($uri, $action){
        $this -> get[$uri] = $action;
        return $this;
    }
    public function post($uri, $action){
        $this -> post[$uri] = $action;
        return $this;
    }
    public function resolve($uri, $method){
        if (array_key_exists($uri, $this -> {$method})){
            $action = $this -> {$method}[$uri]; 
            $this -> callAction(...$action);
        }else{
            die("PAGE NOT FOUND 404");
        };
    }
    public function callAction($controller, $method){
        $controller = new $controller;
        $controller -> {$method}();
    }
};

class Request{
    public static function uri(){
        $uri = parse_url($_SERVER["REQUEST_URI"], PHP_URL_PATH); 
        $uri = str_replace("php-basics","",$uri);
        return trim($uri,"/");
    }
    public static function get($key , $default=null){
        return $_GET[$key] ?? $_POST[$key] ?? $default;
    }
    public static function method(){
        return strtolower($_SERVER["REQUEST_METHOD"]);
    }
}
class TaskController{
    public function index(){
        $tasks = QueryBuilder::get("tasks");
            <!DOCTYPE html>
            <html lang="ar" dir="rtl">
            <head>
                <meta charset="UTF-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.rtl.min.css" integrity="sha384-gXt9imSW0VcJVHezoNQsP+TNrjYXoGcrqBZJpry9zJt8PCQjobwmhMGaDHTASo9N" crossorigin="anonymous">
                <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">
                <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
                <style>
                    .todo-item {
                        display: flex !important; 
                        margin: 8px 0;
                        border-radius: 0;
                        background: #f7f7f7;
                    }
                    .todo-item.completed div {
                        text-decoration: line-through;
                    }
                    .todo-item-remove{
                        visibility: hidden;
                    }
                    .todo-item:hover .todo-item-remove{
                        visibility: visible;
                    }
                </style>
                <title>Tasks</title>
            </head>
            <body>
                <div class="container">
                    <div class="row">
                        <div class="col-md-8 mx-auto">
                            <div class="card mt-3">
                                <div class="card-header p-3">
                                    <form action="task/create" method="POST">
                                        <div class="input-group">
                                            <input type="text" name="description" class="form-control" placeholder="مهمة جديدة..." required>
                                            <button class="btn btn-success" type="submit">
                                                حفظ
                                            </button>
                                        </div>
                                    </form>
                                </div>
                                <div class="card-body p-3">
                                    <?php foreach ($tasks as $task) : ?>
                                        <div class="todo-item p-2 <?= ! $task -> completed ? : 'completed' ?>">
                                            <div class="p-1">
                                                <a href="task/update?id=<?= $task -> id ?>&completed=<?= $task -> completed ? '0' : '1' ?>">
                                                    <i class="bi fs-5 <?= $task -> completed ? 'bi-check-square' : 'bi-clock text-secondary' ?>">

                                                    </i>
                                                </a>
                                            </div>
                                            <div class="flex-fill m-auto p-2">
                                                <?= $task -> description ?>
                                            </div>
                                            <div class="mb-2">
                                                <a href="task/delete?id=<?= $task -> id ?>" class="todo-item-remove">
                                                    <i class="bi bi-trash text-danger fs-4">

                                                    </i>
                                                </a>
                                            </div>
                                        </div>
                                    <?php endforeach ?>
                                </div>
                            </div>
                        </div>
                    </div>      
                </div>
            </body>
            </html>
        

    }
    public function create(){
        $description = Request::get("description");
        QueryBuilder::insert("tasks",[
            "description" => $description
        ]);
        header("Location: http://localhost/php-basics");
    }
    public function delete(){
        if($id = Request::get("id")){
            QueryBuilder::delete("tasks",$id);
        };
        header("Location: http://localhost/php-basics");
    }
    public function update(){
        $id = Request::get("id");
        $completed = Request::get("completed");
        if ($id && $completed != null){
            QueryBuilder::update("tasks",$id,[
                "completed" => $completed
            ]);
        };
        header("Location: http://localhost/php-basics");
    }
};

QueryBuilder::make(
    DBConnection::make()
);

Router::make() ->
get("",[TaskController::class, "index"]) -> 
post("task/create", [TaskController::class, "create"]) -> 
get("task/delete", [TaskController::class, "delete"]) -> 
get("task/update", [TaskController::class, "update"]) -> 
resolve(Request::uri(),Request::method());

-------------------------------------------------------------------------------
$get = [
    "" => [TaskController::class, "index"],
    "task/delete" => [TaskController::class, "delete"],
    "task/update" => [TaskController::class, "update"]
]
$post = [
    "task/create" => [TaskController::class, "create"]
]